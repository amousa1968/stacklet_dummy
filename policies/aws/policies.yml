#option 1
policies:
  - name: forbid-iam-user-creation
    description: |
      Forbids the creation of new IAM users in AWS.
    resource: terraform.aws_iam_user
    filters:
      - type: value
        key: name
        op: not-in
        value:
          - "*not_in_exception_file"
          - "*not_in_exception_file1"
      - name: present
    actions:
      - type: webhook # You could also use a different action like "deny"


#option 2
#policies:
  - name: forbid-iam-user-violation
    resource: terraform.aws_iam_user
    description: "Forbid the creation of aws_iam_user resources"
    filters:
      - type: value
        key: name
        op: not-in
        value:
          - "*not_in_exception_file"

    actions:
      - type: webhook
        to:
          - security-team@example.com
        subject: "IAM User Creation Detected"
        body: "The creation of IAM user resources is forbidden. Found in: {resource.id}"
        template: default

#option 3
#policies:
  - name: forbid-non-authorized-iam-admin-create-role
    resource: terraform.aws_iam_role
    description: >
      Forbid non-authorized IAM users with admin permissions from creating IAM roles.
    mode:
      type: terraform-plan
    filters:
      - type: value
        key: tags.Creator
        op: not-in
        value:
          - authorized-admin-1
          - authorized-admin-2
      - type: value
        key: assume_role_policy_document.Statement[?Effect=='Allow' && contains(Action, 'sts:AssumeRole')].Principal.AWS
        op: not-in
        value:
          - ""
          - null
    actions:
      - type: webhook
        to:
          - security-team@example.com
        subject: "Unauthorized IAM Admin User Tried to Create IAM Role"
        template: default

#option 4
#policies:
  - name: forbid-iam-user-without-permissions
    resource: terraform.aws_iam_user
    description: |
      Forbid creation of AWS IAM users without approved tag.
    filters:
      - type: value
        key: tags.approved
        op: ne
        value: "true"
      - type: value
        key: name
        op: not-in
        value:
          - "exception-user1"
          - "exception-user2"

#option 5
#policies:
  - name: check-iam-user-path
    resource: terraform.aws_iam_user
    description: "Check that AWS IAM users are created under the /service/ path unless in exception list."
    filters:
      - type: value
        key: path
        op: ne
        value: "/service/"
      - type: value
        key: name
        op: not-in
        value:
          - "exception-file"
          - "*not_in_exception_file"

    metadata:
       category: iam
       severity: high       

#option 6
#policies:
  - name: forbid-ec2-instance-create
    resource: terraform.aws_instance
    description: |
      Forbid creating EC2 instances via Terraform.
      Also flags EC2 with IAM roles that have AdministratorAccess.
    filters:
      - or:
          - type: value
            key: iam_instance_profile.roles[].managed_policy_arns[]
            op: contains
            value: "arn:aws:iam::aws:policy/AdministratorAccess"
          - type: value
            key: instance_type
            op: ne
            value: ""  # Any EC2 instance will match (or omit this filter entirely)
    actions:
      - type: webhook
        template: default
        subject: "EC2 Instance Creation Detected"
        to:
          - security-team@example.com
        transport:
          type: debug

    metadata:
       category: iam
       severity: high

